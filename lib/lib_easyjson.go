// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package lib

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonEc607727DecodeFyxVmLib(in *jlexer.Lexer, out *Spawn) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "contract":
			if in.IsNull() {
				in.Skip()
				out.Contract = nil
			} else {
				if out.Contract == nil {
					out.Contract = new(Outpoint)
				}
				if in.IsNull() {
					in.Skip()
					*out.Contract = nil
				} else {
					*out.Contract = in.Bytes()
				}
			}
		case "method":
			out.Method = string(in.String())
		case "callData":
			if in.IsNull() {
				in.Skip()
				out.CallData = nil
			} else {
				out.CallData = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEc607727EncodeFyxVmLib(out *jwriter.Writer, in Spawn) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"contract\":"
		out.RawString(prefix[1:])
		if in.Contract == nil {
			out.RawString("null")
		} else {
			out.Base64Bytes(*in.Contract)
		}
	}
	{
		const prefix string = ",\"method\":"
		out.RawString(prefix)
		out.String(string(in.Method))
	}
	{
		const prefix string = ",\"callData\":"
		out.RawString(prefix)
		out.Base64Bytes(in.CallData)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Spawn) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEc607727EncodeFyxVmLib(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Spawn) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEc607727EncodeFyxVmLib(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Spawn) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEc607727DecodeFyxVmLib(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Spawn) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEc607727DecodeFyxVmLib(l, v)
}
func easyjsonEc607727DecodeFyxVmLib1(in *jlexer.Lexer, out *Parent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "idx":
			out.Idx = int(in.Int())
		case "outpoint":
			if in.IsNull() {
				in.Skip()
				out.Outpoint = nil
			} else {
				if out.Outpoint == nil {
					out.Outpoint = new(Outpoint)
				}
				if in.IsNull() {
					in.Skip()
					*out.Outpoint = nil
				} else {
					*out.Outpoint = in.Bytes()
				}
			}
		case "kind":
			if in.IsNull() {
				in.Skip()
				out.Kind = nil
			} else {
				if out.Kind == nil {
					out.Kind = new(Outpoint)
				}
				if in.IsNull() {
					in.Skip()
					*out.Kind = nil
				} else {
					*out.Kind = in.Bytes()
				}
			}
		case "lock":
			if in.IsNull() {
				in.Skip()
				out.Lock = nil
			} else {
				out.Lock = in.Bytes()
			}
		case "origin":
			if in.IsNull() {
				in.Skip()
				out.Origin = nil
			} else {
				if out.Origin == nil {
					out.Origin = new(Outpoint)
				}
				if in.IsNull() {
					in.Skip()
					*out.Origin = nil
				} else {
					*out.Origin = in.Bytes()
				}
			}
		case "nonce":
			out.Nonce = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEc607727EncodeFyxVmLib1(out *jwriter.Writer, in Parent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"idx\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Idx))
	}
	{
		const prefix string = ",\"outpoint\":"
		out.RawString(prefix)
		if in.Outpoint == nil {
			out.RawString("null")
		} else {
			out.Base64Bytes(*in.Outpoint)
		}
	}
	{
		const prefix string = ",\"kind\":"
		out.RawString(prefix)
		if in.Kind == nil {
			out.RawString("null")
		} else {
			out.Base64Bytes(*in.Kind)
		}
	}
	{
		const prefix string = ",\"lock\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Lock)
	}
	{
		const prefix string = ",\"origin\":"
		out.RawString(prefix)
		if in.Origin == nil {
			out.RawString("null")
		} else {
			out.Base64Bytes(*in.Origin)
		}
	}
	{
		const prefix string = ",\"nonce\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Nonce))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Parent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEc607727EncodeFyxVmLib1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Parent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEc607727EncodeFyxVmLib1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Parent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEc607727DecodeFyxVmLib1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Parent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEc607727DecodeFyxVmLib1(l, v)
}
func easyjsonEc607727DecodeFyxVmLib2(in *jlexer.Lexer, out *Instance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "outpoint":
			if in.IsNull() {
				in.Skip()
				out.Outpoint = nil
			} else {
				if out.Outpoint == nil {
					out.Outpoint = new(Outpoint)
				}
				if in.IsNull() {
					in.Skip()
					*out.Outpoint = nil
				} else {
					*out.Outpoint = in.Bytes()
				}
			}
		case "origin":
			if in.IsNull() {
				in.Skip()
				out.Origin = nil
			} else {
				if out.Origin == nil {
					out.Origin = new(Outpoint)
				}
				if in.IsNull() {
					in.Skip()
					*out.Origin = nil
				} else {
					*out.Origin = in.Bytes()
				}
			}
		case "nonce":
			out.Nonce = uint64(in.Uint64())
		case "kind":
			if in.IsNull() {
				in.Skip()
				out.Kind = nil
			} else {
				if out.Kind == nil {
					out.Kind = new(Outpoint)
				}
				if in.IsNull() {
					in.Skip()
					*out.Kind = nil
				} else {
					*out.Kind = in.Bytes()
				}
			}
		case "sats":
			out.Satoshis = uint64(in.Uint64())
		case "lock":
			if in.IsNull() {
				in.Skip()
				out.Lock = nil
			} else {
				out.Lock = in.Bytes()
			}
		case "store":
			if in.IsNull() {
				in.Skip()
				out.Storage = nil
			} else {
				out.Storage = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEc607727EncodeFyxVmLib2(out *jwriter.Writer, in Instance) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Outpoint != nil {
		const prefix string = ",\"outpoint\":"
		first = false
		out.RawString(prefix[1:])
		out.Base64Bytes(*in.Outpoint)
	}
	if in.Origin != nil {
		const prefix string = ",\"origin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(*in.Origin)
	}
	if in.Nonce != 0 {
		const prefix string = ",\"nonce\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Nonce))
	}
	if in.Kind != nil {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(*in.Kind)
	}
	{
		const prefix string = ",\"sats\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Satoshis))
	}
	{
		const prefix string = ",\"lock\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Lock)
	}
	if len(in.Storage) != 0 {
		const prefix string = ",\"store\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Storage)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Instance) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEc607727EncodeFyxVmLib2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Instance) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEc607727EncodeFyxVmLib2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Instance) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEc607727DecodeFyxVmLib2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Instance) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEc607727DecodeFyxVmLib2(l, v)
}
func easyjsonEc607727DecodeFyxVmLib3(in *jlexer.Lexer, out *File) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Outpoint":
			if in.IsNull() {
				in.Skip()
				out.Outpoint = nil
			} else {
				if out.Outpoint == nil {
					out.Outpoint = new(Outpoint)
				}
				if in.IsNull() {
					in.Skip()
					*out.Outpoint = nil
				} else {
					*out.Outpoint = in.Bytes()
				}
			}
		case "Data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		case "Type":
			out.Type = string(in.String())
		case "Encoding":
			out.Encoding = string(in.String())
		case "Name":
			out.Name = string(in.String())
		case "Size":
			out.Size = uint32(in.Uint32())
		case "Hash":
			if in.IsNull() {
				in.Skip()
				out.Hash = nil
			} else {
				out.Hash = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEc607727EncodeFyxVmLib3(out *jwriter.Writer, in File) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Outpoint\":"
		out.RawString(prefix[1:])
		if in.Outpoint == nil {
			out.RawString("null")
		} else {
			out.Base64Bytes(*in.Outpoint)
		}
	}
	{
		const prefix string = ",\"Data\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Data)
	}
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"Encoding\":"
		out.RawString(prefix)
		out.String(string(in.Encoding))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Size\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Size))
	}
	{
		const prefix string = ",\"Hash\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Hash)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v File) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEc607727EncodeFyxVmLib3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v File) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEc607727EncodeFyxVmLib3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *File) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEc607727DecodeFyxVmLib3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *File) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEc607727DecodeFyxVmLib3(l, v)
}
func easyjsonEc607727DecodeFyxVmLib4(in *jlexer.Lexer, out *Event) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "topics":
			if in.IsNull() {
				in.Skip()
				out.Topics = nil
			} else {
				in.Delim('[')
				if out.Topics == nil {
					if !in.IsDelim(']') {
						out.Topics = make([][]uint8, 0, 2)
					} else {
						out.Topics = [][]uint8{}
					}
				} else {
					out.Topics = (out.Topics)[:0]
				}
				for !in.IsDelim(']') {
					var v43 []uint8
					if in.IsNull() {
						in.Skip()
						v43 = nil
					} else {
						v43 = in.Bytes()
					}
					out.Topics = append(out.Topics, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEc607727EncodeFyxVmLib4(out *jwriter.Writer, in Event) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"topics\":"
		out.RawString(prefix)
		if in.Topics == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v45, v46 := range in.Topics {
				if v45 > 0 {
					out.RawByte(',')
				}
				out.Base64Bytes(v46)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Event) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEc607727EncodeFyxVmLib4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Event) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEc607727EncodeFyxVmLib4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Event) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEc607727DecodeFyxVmLib4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Event) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEc607727DecodeFyxVmLib4(l, v)
}
func easyjsonEc607727DecodeFyxVmLib5(in *jlexer.Lexer, out *Error) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Code":
			out.Code = int(in.Int())
		case "Err":
			out.Err = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEc607727EncodeFyxVmLib5(out *jwriter.Writer, in Error) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"Err\":"
		out.RawString(prefix)
		out.String(string(in.Err))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Error) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEc607727EncodeFyxVmLib5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Error) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEc607727EncodeFyxVmLib5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Error) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEc607727DecodeFyxVmLib5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Error) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEc607727DecodeFyxVmLib5(l, v)
}
