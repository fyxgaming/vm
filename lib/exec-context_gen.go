package lib

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Action) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 byte
		zb0001, err = dc.ReadByte()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = Action(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Action) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteByte(byte(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Action) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendByte(o, byte(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Action) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 byte
		zb0001, bts, err = msgp.ReadByteBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = Action(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Action) Msgsize() (s int) {
	s = msgp.ByteSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ExecContext) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Action":
			{
				var zb0002 byte
				zb0002, err = dc.ReadByte()
				if err != nil {
					err = msgp.WrapError(err, "Action")
					return
				}
				z.Action = Action(zb0002)
			}
		case "Contract":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Contract")
					return
				}
				z.Contract = nil
			} else {
				if z.Contract == nil {
					z.Contract = new(Outpoint)
				}
				err = z.Contract.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Contract")
					return
				}
			}
		case "Method":
			z.Method, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Method")
				return
			}
		case "CallData":
			z.CallData, err = dc.ReadBytes(z.CallData)
			if err != nil {
				err = msgp.WrapError(err, "CallData")
				return
			}
		case "Stack":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Stack")
				return
			}
			if cap(z.Stack) >= int(zb0003) {
				z.Stack = (z.Stack)[:zb0003]
			} else {
				z.Stack = make([]*ExecContext, zb0003)
			}
			for za0001 := range z.Stack {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Stack", za0001)
						return
					}
					z.Stack[za0001] = nil
				} else {
					if z.Stack[za0001] == nil {
						z.Stack[za0001] = new(ExecContext)
					}
					err = z.Stack[za0001].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Stack", za0001)
						return
					}
				}
			}
		case "Instance":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Instance")
					return
				}
				z.Instance = nil
			} else {
				if z.Instance == nil {
					z.Instance = new(Instance)
				}
				err = z.Instance.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Instance")
					return
				}
			}
		case "Events":
			var zb0004 uint32
			zb0004, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Events")
				return
			}
			if cap(z.Events) >= int(zb0004) {
				z.Events = (z.Events)[:zb0004]
			} else {
				z.Events = make([]*Event, zb0004)
			}
			for za0002 := range z.Events {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Events", za0002)
						return
					}
					z.Events[za0002] = nil
				} else {
					if z.Events[za0002] == nil {
						z.Events[za0002] = new(Event)
					}
					err = z.Events[za0002].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Events", za0002)
						return
					}
				}
			}
		case "Children":
			var zb0005 uint32
			zb0005, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Children")
				return
			}
			if cap(z.Children) >= int(zb0005) {
				z.Children = (z.Children)[:zb0005]
			} else {
				z.Children = make([]*Child, zb0005)
			}
			for za0003 := range z.Children {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Children", za0003)
						return
					}
					z.Children[za0003] = nil
				} else {
					if z.Children[za0003] == nil {
						z.Children[za0003] = new(Child)
					}
					err = z.Children[za0003].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Children", za0003)
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ExecContext) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 8
	// write "Action"
	err = en.Append(0x88, 0xa6, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteByte(byte(z.Action))
	if err != nil {
		err = msgp.WrapError(err, "Action")
		return
	}
	// write "Contract"
	err = en.Append(0xa8, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74)
	if err != nil {
		return
	}
	if z.Contract == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Contract.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Contract")
			return
		}
	}
	// write "Method"
	err = en.Append(0xa6, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Method)
	if err != nil {
		err = msgp.WrapError(err, "Method")
		return
	}
	// write "CallData"
	err = en.Append(0xa8, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.CallData)
	if err != nil {
		err = msgp.WrapError(err, "CallData")
		return
	}
	// write "Stack"
	err = en.Append(0xa5, 0x53, 0x74, 0x61, 0x63, 0x6b)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Stack)))
	if err != nil {
		err = msgp.WrapError(err, "Stack")
		return
	}
	for za0001 := range z.Stack {
		if z.Stack[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Stack[za0001].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Stack", za0001)
				return
			}
		}
	}
	// write "Instance"
	err = en.Append(0xa8, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65)
	if err != nil {
		return
	}
	if z.Instance == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Instance.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Instance")
			return
		}
	}
	// write "Events"
	err = en.Append(0xa6, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Events)))
	if err != nil {
		err = msgp.WrapError(err, "Events")
		return
	}
	for za0002 := range z.Events {
		if z.Events[za0002] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Events[za0002].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Events", za0002)
				return
			}
		}
	}
	// write "Children"
	err = en.Append(0xa8, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Children)))
	if err != nil {
		err = msgp.WrapError(err, "Children")
		return
	}
	for za0003 := range z.Children {
		if z.Children[za0003] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Children[za0003].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Children", za0003)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ExecContext) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 8
	// string "Action"
	o = append(o, 0x88, 0xa6, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendByte(o, byte(z.Action))
	// string "Contract"
	o = append(o, 0xa8, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74)
	if z.Contract == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Contract.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Contract")
			return
		}
	}
	// string "Method"
	o = append(o, 0xa6, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64)
	o = msgp.AppendString(o, z.Method)
	// string "CallData"
	o = append(o, 0xa8, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61)
	o = msgp.AppendBytes(o, z.CallData)
	// string "Stack"
	o = append(o, 0xa5, 0x53, 0x74, 0x61, 0x63, 0x6b)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Stack)))
	for za0001 := range z.Stack {
		if z.Stack[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Stack[za0001].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Stack", za0001)
				return
			}
		}
	}
	// string "Instance"
	o = append(o, 0xa8, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65)
	if z.Instance == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Instance.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Instance")
			return
		}
	}
	// string "Events"
	o = append(o, 0xa6, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Events)))
	for za0002 := range z.Events {
		if z.Events[za0002] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Events[za0002].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Events", za0002)
				return
			}
		}
	}
	// string "Children"
	o = append(o, 0xa8, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Children)))
	for za0003 := range z.Children {
		if z.Children[za0003] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Children[za0003].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Children", za0003)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ExecContext) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Action":
			{
				var zb0002 byte
				zb0002, bts, err = msgp.ReadByteBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Action")
					return
				}
				z.Action = Action(zb0002)
			}
		case "Contract":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Contract = nil
			} else {
				if z.Contract == nil {
					z.Contract = new(Outpoint)
				}
				bts, err = z.Contract.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Contract")
					return
				}
			}
		case "Method":
			z.Method, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Method")
				return
			}
		case "CallData":
			z.CallData, bts, err = msgp.ReadBytesBytes(bts, z.CallData)
			if err != nil {
				err = msgp.WrapError(err, "CallData")
				return
			}
		case "Stack":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Stack")
				return
			}
			if cap(z.Stack) >= int(zb0003) {
				z.Stack = (z.Stack)[:zb0003]
			} else {
				z.Stack = make([]*ExecContext, zb0003)
			}
			for za0001 := range z.Stack {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Stack[za0001] = nil
				} else {
					if z.Stack[za0001] == nil {
						z.Stack[za0001] = new(ExecContext)
					}
					bts, err = z.Stack[za0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Stack", za0001)
						return
					}
				}
			}
		case "Instance":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Instance = nil
			} else {
				if z.Instance == nil {
					z.Instance = new(Instance)
				}
				bts, err = z.Instance.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Instance")
					return
				}
			}
		case "Events":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Events")
				return
			}
			if cap(z.Events) >= int(zb0004) {
				z.Events = (z.Events)[:zb0004]
			} else {
				z.Events = make([]*Event, zb0004)
			}
			for za0002 := range z.Events {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Events[za0002] = nil
				} else {
					if z.Events[za0002] == nil {
						z.Events[za0002] = new(Event)
					}
					bts, err = z.Events[za0002].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Events", za0002)
						return
					}
				}
			}
		case "Children":
			var zb0005 uint32
			zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Children")
				return
			}
			if cap(z.Children) >= int(zb0005) {
				z.Children = (z.Children)[:zb0005]
			} else {
				z.Children = make([]*Child, zb0005)
			}
			for za0003 := range z.Children {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Children[za0003] = nil
				} else {
					if z.Children[za0003] == nil {
						z.Children[za0003] = new(Child)
					}
					bts, err = z.Children[za0003].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Children", za0003)
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ExecContext) Msgsize() (s int) {
	s = 1 + 7 + msgp.ByteSize + 9
	if z.Contract == nil {
		s += msgp.NilSize
	} else {
		s += z.Contract.Msgsize()
	}
	s += 7 + msgp.StringPrefixSize + len(z.Method) + 9 + msgp.BytesPrefixSize + len(z.CallData) + 6 + msgp.ArrayHeaderSize
	for za0001 := range z.Stack {
		if z.Stack[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.Stack[za0001].Msgsize()
		}
	}
	s += 9
	if z.Instance == nil {
		s += msgp.NilSize
	} else {
		s += z.Instance.Msgsize()
	}
	s += 7 + msgp.ArrayHeaderSize
	for za0002 := range z.Events {
		if z.Events[za0002] == nil {
			s += msgp.NilSize
		} else {
			s += z.Events[za0002].Msgsize()
		}
	}
	s += 9 + msgp.ArrayHeaderSize
	for za0003 := range z.Children {
		if z.Children[za0003] == nil {
			s += msgp.NilSize
		} else {
			s += z.Children[za0003].Msgsize()
		}
	}
	return
}
