// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package lib

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE910b2f5DecodeGithubComFyxgamingVmLib(in *jlexer.Lexer, out *ExecContext) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "action":
			out.Action = string(in.String())
		case "contract":
			if in.IsNull() {
				in.Skip()
				out.Contract = nil
			} else {
				if out.Contract == nil {
					out.Contract = new(Outpoint)
				}
				if in.IsNull() {
					in.Skip()
					*out.Contract = nil
				} else {
					*out.Contract = in.Bytes()
				}
			}
		case "method":
			out.Method = string(in.String())
		case "callData":
			out.CallData = string(in.String())
		case "stack":
			if in.IsNull() {
				in.Skip()
				out.Stack = nil
			} else {
				in.Delim('[')
				if out.Stack == nil {
					if !in.IsDelim(']') {
						out.Stack = make([]*ExecContext, 0, 8)
					} else {
						out.Stack = []*ExecContext{}
					}
				} else {
					out.Stack = (out.Stack)[:0]
				}
				for !in.IsDelim(']') {
					var v2 *ExecContext
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(ExecContext)
						}
						(*v2).UnmarshalEasyJSON(in)
					}
					out.Stack = append(out.Stack, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "parent":
			if in.IsNull() {
				in.Skip()
				out.Parent = nil
			} else {
				if out.Parent == nil {
					out.Parent = new(Parent)
				}
				easyjsonE910b2f5DecodeGithubComFyxgamingVmLib1(in, out.Parent)
			}
		case "instance":
			if in.IsNull() {
				in.Skip()
				out.Instance = nil
			} else {
				if out.Instance == nil {
					out.Instance = new(Instance)
				}
				easyjsonE910b2f5DecodeGithubComFyxgamingVmLib2(in, out.Instance)
			}
		case "events":
			if in.IsNull() {
				in.Skip()
				out.Events = nil
			} else {
				in.Delim('[')
				if out.Events == nil {
					if !in.IsDelim(']') {
						out.Events = make([]*Event, 0, 8)
					} else {
						out.Events = []*Event{}
					}
				} else {
					out.Events = (out.Events)[:0]
				}
				for !in.IsDelim(']') {
					var v3 *Event
					if in.IsNull() {
						in.Skip()
						v3 = nil
					} else {
						if v3 == nil {
							v3 = new(Event)
						}
						easyjsonE910b2f5DecodeGithubComFyxgamingVmLib3(in, v3)
					}
					out.Events = append(out.Events, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "spawn":
			if in.IsNull() {
				in.Skip()
				out.Children = nil
			} else {
				in.Delim('[')
				if out.Children == nil {
					if !in.IsDelim(']') {
						out.Children = make([]*Child, 0, 8)
					} else {
						out.Children = []*Child{}
					}
				} else {
					out.Children = (out.Children)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *Child
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(Child)
						}
						easyjsonE910b2f5DecodeGithubComFyxgamingVmLib4(in, v4)
					}
					out.Children = append(out.Children, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE910b2f5EncodeGithubComFyxgamingVmLib(out *jwriter.Writer, in ExecContext) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"action\":"
		out.RawString(prefix[1:])
		out.String(string(in.Action))
	}
	{
		const prefix string = ",\"contract\":"
		out.RawString(prefix)
		if in.Contract == nil {
			out.RawString("null")
		} else {
			out.Base64Bytes(*in.Contract)
		}
	}
	{
		const prefix string = ",\"method\":"
		out.RawString(prefix)
		out.String(string(in.Method))
	}
	if in.CallData != "" {
		const prefix string = ",\"callData\":"
		out.RawString(prefix)
		out.String(string(in.CallData))
	}
	if len(in.Stack) != 0 {
		const prefix string = ",\"stack\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v7, v8 := range in.Stack {
				if v7 > 0 {
					out.RawByte(',')
				}
				if v8 == nil {
					out.RawString("null")
				} else {
					(*v8).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Parent != nil {
		const prefix string = ",\"parent\":"
		out.RawString(prefix)
		easyjsonE910b2f5EncodeGithubComFyxgamingVmLib1(out, *in.Parent)
	}
	{
		const prefix string = ",\"instance\":"
		out.RawString(prefix)
		if in.Instance == nil {
			out.RawString("null")
		} else {
			easyjsonE910b2f5EncodeGithubComFyxgamingVmLib2(out, *in.Instance)
		}
	}
	if len(in.Events) != 0 {
		const prefix string = ",\"events\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v9, v10 := range in.Events {
				if v9 > 0 {
					out.RawByte(',')
				}
				if v10 == nil {
					out.RawString("null")
				} else {
					easyjsonE910b2f5EncodeGithubComFyxgamingVmLib3(out, *v10)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Children) != 0 {
		const prefix string = ",\"spawn\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v11, v12 := range in.Children {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					easyjsonE910b2f5EncodeGithubComFyxgamingVmLib4(out, *v12)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExecContext) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE910b2f5EncodeGithubComFyxgamingVmLib(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExecContext) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE910b2f5EncodeGithubComFyxgamingVmLib(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExecContext) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE910b2f5DecodeGithubComFyxgamingVmLib(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExecContext) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE910b2f5DecodeGithubComFyxgamingVmLib(l, v)
}
func easyjsonE910b2f5DecodeGithubComFyxgamingVmLib4(in *jlexer.Lexer, out *Child) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "contract":
			if in.IsNull() {
				in.Skip()
				out.Contract = nil
			} else {
				if out.Contract == nil {
					out.Contract = new(Outpoint)
				}
				if in.IsNull() {
					in.Skip()
					*out.Contract = nil
				} else {
					*out.Contract = in.Bytes()
				}
			}
		case "method":
			out.Method = string(in.String())
		case "callData":
			out.CallData = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE910b2f5EncodeGithubComFyxgamingVmLib4(out *jwriter.Writer, in Child) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"contract\":"
		out.RawString(prefix[1:])
		if in.Contract == nil {
			out.RawString("null")
		} else {
			out.Base64Bytes(*in.Contract)
		}
	}
	{
		const prefix string = ",\"method\":"
		out.RawString(prefix)
		out.String(string(in.Method))
	}
	{
		const prefix string = ",\"callData\":"
		out.RawString(prefix)
		out.String(string(in.CallData))
	}
	out.RawByte('}')
}
func easyjsonE910b2f5DecodeGithubComFyxgamingVmLib3(in *jlexer.Lexer, out *Event) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "topics":
			if in.IsNull() {
				in.Skip()
				out.Topics = nil
			} else {
				in.Delim('[')
				if out.Topics == nil {
					if !in.IsDelim(']') {
						out.Topics = make([]string, 0, 4)
					} else {
						out.Topics = []string{}
					}
				} else {
					out.Topics = (out.Topics)[:0]
				}
				for !in.IsDelim(']') {
					var v16 string
					v16 = string(in.String())
					out.Topics = append(out.Topics, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE910b2f5EncodeGithubComFyxgamingVmLib3(out *jwriter.Writer, in Event) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"topics\":"
		out.RawString(prefix)
		if in.Topics == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Topics {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonE910b2f5DecodeGithubComFyxgamingVmLib2(in *jlexer.Lexer, out *Instance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "outpoint":
			if in.IsNull() {
				in.Skip()
				out.Outpoint = nil
			} else {
				if out.Outpoint == nil {
					out.Outpoint = new(Outpoint)
				}
				if in.IsNull() {
					in.Skip()
					*out.Outpoint = nil
				} else {
					*out.Outpoint = in.Bytes()
				}
			}
		case "origin":
			if in.IsNull() {
				in.Skip()
				out.Origin = nil
			} else {
				if out.Origin == nil {
					out.Origin = new(Outpoint)
				}
				if in.IsNull() {
					in.Skip()
					*out.Origin = nil
				} else {
					*out.Origin = in.Bytes()
				}
			}
		case "nonce":
			out.Nonce = uint64(in.Uint64())
		case "kind":
			if in.IsNull() {
				in.Skip()
				out.Kind = nil
			} else {
				if out.Kind == nil {
					out.Kind = new(Outpoint)
				}
				if in.IsNull() {
					in.Skip()
					*out.Kind = nil
				} else {
					*out.Kind = in.Bytes()
				}
			}
		case "sats":
			out.Satoshis = uint64(in.Uint64())
		case "lock":
			if in.IsNull() {
				in.Skip()
				out.Lock = nil
			} else {
				out.Lock = in.Bytes()
			}
		case "store":
			out.Storage = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE910b2f5EncodeGithubComFyxgamingVmLib2(out *jwriter.Writer, in Instance) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Outpoint != nil {
		const prefix string = ",\"outpoint\":"
		first = false
		out.RawString(prefix[1:])
		out.Base64Bytes(*in.Outpoint)
	}
	if in.Origin != nil {
		const prefix string = ",\"origin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(*in.Origin)
	}
	if in.Nonce != 0 {
		const prefix string = ",\"nonce\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Nonce))
	}
	if in.Kind != nil {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(*in.Kind)
	}
	{
		const prefix string = ",\"sats\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Satoshis))
	}
	{
		const prefix string = ",\"lock\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Lock)
	}
	if in.Storage != "" {
		const prefix string = ",\"store\":"
		out.RawString(prefix)
		out.String(string(in.Storage))
	}
	out.RawByte('}')
}
func easyjsonE910b2f5DecodeGithubComFyxgamingVmLib1(in *jlexer.Lexer, out *Parent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "idx":
			out.Idx = int(in.Int())
		case "outpoint":
			if in.IsNull() {
				in.Skip()
				out.Outpoint = nil
			} else {
				if out.Outpoint == nil {
					out.Outpoint = new(Outpoint)
				}
				if in.IsNull() {
					in.Skip()
					*out.Outpoint = nil
				} else {
					*out.Outpoint = in.Bytes()
				}
			}
		case "kind":
			if in.IsNull() {
				in.Skip()
				out.Kind = nil
			} else {
				if out.Kind == nil {
					out.Kind = new(Outpoint)
				}
				if in.IsNull() {
					in.Skip()
					*out.Kind = nil
				} else {
					*out.Kind = in.Bytes()
				}
			}
		case "lock":
			if in.IsNull() {
				in.Skip()
				out.Lock = nil
			} else {
				out.Lock = in.Bytes()
			}
		case "origin":
			if in.IsNull() {
				in.Skip()
				out.Origin = nil
			} else {
				if out.Origin == nil {
					out.Origin = new(Outpoint)
				}
				if in.IsNull() {
					in.Skip()
					*out.Origin = nil
				} else {
					*out.Origin = in.Bytes()
				}
			}
		case "nonce":
			out.Nonce = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE910b2f5EncodeGithubComFyxgamingVmLib1(out *jwriter.Writer, in Parent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"idx\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Idx))
	}
	{
		const prefix string = ",\"outpoint\":"
		out.RawString(prefix)
		if in.Outpoint == nil {
			out.RawString("null")
		} else {
			out.Base64Bytes(*in.Outpoint)
		}
	}
	{
		const prefix string = ",\"kind\":"
		out.RawString(prefix)
		if in.Kind == nil {
			out.RawString("null")
		} else {
			out.Base64Bytes(*in.Kind)
		}
	}
	{
		const prefix string = ",\"lock\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Lock)
	}
	{
		const prefix string = ",\"origin\":"
		out.RawString(prefix)
		if in.Origin == nil {
			out.RawString("null")
		} else {
			out.Base64Bytes(*in.Origin)
		}
	}
	{
		const prefix string = ",\"nonce\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Nonce))
	}
	out.RawByte('}')
}
