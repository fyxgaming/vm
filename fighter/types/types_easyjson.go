// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	json "encoding/json"
	skills "github.com/fyxgaming/vm/fighter/types/skills"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeGithubComFyxgamingVmFighterTypes(in *jlexer.Lexer, out *LevelUpRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ability":
			out.Ability = int32(in.Int32())
		case "skillType":
			out.SkillType = skills.SkillType(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComFyxgamingVmFighterTypes(out *jwriter.Writer, in LevelUpRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ability\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Ability))
	}
	{
		const prefix string = ",\"skillType\":"
		out.RawString(prefix)
		out.Int32(int32(in.SkillType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LevelUpRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComFyxgamingVmFighterTypes(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LevelUpRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComFyxgamingVmFighterTypes(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LevelUpRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComFyxgamingVmFighterTypes(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LevelUpRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComFyxgamingVmFighterTypes(l, v)
}
func easyjson6601e8cdDecodeGithubComFyxgamingVmFighterTypes1(in *jlexer.Lexer, out *Fighter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "race":
			out.Race = Race(in.Int32())
		case "abilityScores":
			if in.IsNull() {
				in.Skip()
				out.AbilityScores = nil
			} else {
				in.Delim('[')
				if out.AbilityScores == nil {
					if !in.IsDelim(']') {
						out.AbilityScores = make([]int32, 0, 16)
					} else {
						out.AbilityScores = []int32{}
					}
				} else {
					out.AbilityScores = (out.AbilityScores)[:0]
				}
				for !in.IsDelim(']') {
					var v1 int32
					v1 = int32(in.Int32())
					out.AbilityScores = append(out.AbilityScores, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "appearance":
			(out.Appearance).UnmarshalEasyJSON(in)
		case "skills":
			if in.IsNull() {
				in.Skip()
				out.Skills = nil
			} else {
				in.Delim('[')
				if out.Skills == nil {
					if !in.IsDelim(']') {
						out.Skills = make([]skills.SkillType, 0, 16)
					} else {
						out.Skills = []skills.SkillType{}
					}
				} else {
					out.Skills = (out.Skills)[:0]
				}
				for !in.IsDelim(']') {
					var v2 skills.SkillType
					v2 = skills.SkillType(in.Int32())
					out.Skills = append(out.Skills, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "level":
			out.Level = int32(in.Int32())
		case "xp":
			out.Xp = int32(in.Int32())
		case "levelUpHpBonusDice":
			if in.IsNull() {
				in.Skip()
				out.LevelUpHpBonusDice = nil
			} else {
				in.Delim('[')
				if out.LevelUpHpBonusDice == nil {
					if !in.IsDelim(']') {
						out.LevelUpHpBonusDice = make([]int32, 0, 16)
					} else {
						out.LevelUpHpBonusDice = []int32{}
					}
				} else {
					out.LevelUpHpBonusDice = (out.LevelUpHpBonusDice)[:0]
				}
				for !in.IsDelim(']') {
					var v3 int32
					v3 = int32(in.Int32())
					out.LevelUpHpBonusDice = append(out.LevelUpHpBonusDice, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "levelUpHpBonusModifiers":
			if in.IsNull() {
				in.Skip()
				out.LevelUpHpBonusMods = nil
			} else {
				in.Delim('[')
				if out.LevelUpHpBonusMods == nil {
					if !in.IsDelim(']') {
						out.LevelUpHpBonusMods = make([]int32, 0, 16)
					} else {
						out.LevelUpHpBonusMods = []int32{}
					}
				} else {
					out.LevelUpHpBonusMods = (out.LevelUpHpBonusMods)[:0]
				}
				for !in.IsDelim(']') {
					var v4 int32
					v4 = int32(in.Int32())
					out.LevelUpHpBonusMods = append(out.LevelUpHpBonusMods, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pvpBattlesFought":
			out.PvpBattlesFought = int32(in.Int32())
		case "pvpBattlesWon":
			out.PvpBattlesWon = int32(in.Int32())
		case "pveBattlesFought":
			out.PveBattlesFought = int32(in.Int32())
		case "pveBattlesWon":
			out.PveBattlesWon = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComFyxgamingVmFighterTypes1(out *jwriter.Writer, in Fighter) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"race\":"
		out.RawString(prefix)
		out.Int32(int32(in.Race))
	}
	{
		const prefix string = ",\"abilityScores\":"
		out.RawString(prefix)
		if in.AbilityScores == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.AbilityScores {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Int32(int32(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"appearance\":"
		out.RawString(prefix)
		(in.Appearance).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"skills\":"
		out.RawString(prefix)
		if in.Skills == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.Skills {
				if v7 > 0 {
					out.RawByte(',')
				}
				out.Int32(int32(v8))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"level\":"
		out.RawString(prefix)
		out.Int32(int32(in.Level))
	}
	{
		const prefix string = ",\"xp\":"
		out.RawString(prefix)
		out.Int32(int32(in.Xp))
	}
	{
		const prefix string = ",\"levelUpHpBonusDice\":"
		out.RawString(prefix)
		if in.LevelUpHpBonusDice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.LevelUpHpBonusDice {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.Int32(int32(v10))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"levelUpHpBonusModifiers\":"
		out.RawString(prefix)
		if in.LevelUpHpBonusMods == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.LevelUpHpBonusMods {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.Int32(int32(v12))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"pvpBattlesFought\":"
		out.RawString(prefix)
		out.Int32(int32(in.PvpBattlesFought))
	}
	{
		const prefix string = ",\"pvpBattlesWon\":"
		out.RawString(prefix)
		out.Int32(int32(in.PvpBattlesWon))
	}
	{
		const prefix string = ",\"pveBattlesFought\":"
		out.RawString(prefix)
		out.Int32(int32(in.PveBattlesFought))
	}
	{
		const prefix string = ",\"pveBattlesWon\":"
		out.RawString(prefix)
		out.Int32(int32(in.PveBattlesWon))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Fighter) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComFyxgamingVmFighterTypes1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Fighter) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComFyxgamingVmFighterTypes1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Fighter) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComFyxgamingVmFighterTypes1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Fighter) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComFyxgamingVmFighterTypes1(l, v)
}
func easyjson6601e8cdDecodeGithubComFyxgamingVmFighterTypes2(in *jlexer.Lexer, out *Appearance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "gender":
			out.Gender = int32(in.Int32())
		case "faceIdentifier":
			out.FaceId = int32(in.Int32())
		case "hairIdentifier":
			out.HairId = int32(in.Int32())
		case "beardIdentifier":
			out.BeardId = int32(in.Int32())
		case "skinToneIdentifier":
			out.SkinToneId = int32(in.Int32())
		case "hairColorIdentifier":
			out.HairColorId = int32(in.Int32())
		case "eyeColorIdentifier":
			out.EyeColorId = int32(in.Int32())
		case "armorColorIdentifier":
			out.ArmorColorId = int32(in.Int32())
		case "hatIdentifier":
			out.HatId = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComFyxgamingVmFighterTypes2(out *jwriter.Writer, in Appearance) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"gender\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Gender))
	}
	{
		const prefix string = ",\"faceIdentifier\":"
		out.RawString(prefix)
		out.Int32(int32(in.FaceId))
	}
	{
		const prefix string = ",\"hairIdentifier\":"
		out.RawString(prefix)
		out.Int32(int32(in.HairId))
	}
	{
		const prefix string = ",\"beardIdentifier\":"
		out.RawString(prefix)
		out.Int32(int32(in.BeardId))
	}
	{
		const prefix string = ",\"skinToneIdentifier\":"
		out.RawString(prefix)
		out.Int32(int32(in.SkinToneId))
	}
	{
		const prefix string = ",\"hairColorIdentifier\":"
		out.RawString(prefix)
		out.Int32(int32(in.HairColorId))
	}
	{
		const prefix string = ",\"eyeColorIdentifier\":"
		out.RawString(prefix)
		out.Int32(int32(in.EyeColorId))
	}
	{
		const prefix string = ",\"armorColorIdentifier\":"
		out.RawString(prefix)
		out.Int32(int32(in.ArmorColorId))
	}
	{
		const prefix string = ",\"hatIdentifier\":"
		out.RawString(prefix)
		out.Int32(int32(in.HatId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Appearance) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComFyxgamingVmFighterTypes2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Appearance) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComFyxgamingVmFighterTypes2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Appearance) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComFyxgamingVmFighterTypes2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Appearance) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComFyxgamingVmFighterTypes2(l, v)
}
