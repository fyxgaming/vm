// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	json "encoding/json"
	lib "github.com/fyxgaming/vm/lib"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeGithubComFyxgamingVmBattleTypes(in *jlexer.Lexer, out *Player) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Pubkey":
			if in.IsNull() {
				in.Skip()
				out.Pubkey = nil
			} else {
				out.Pubkey = in.Bytes()
			}
		case "Payload":
			if in.IsNull() {
				in.Skip()
				out.Payload = nil
			} else {
				out.Payload = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComFyxgamingVmBattleTypes(out *jwriter.Writer, in Player) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Pubkey\":"
		out.RawString(prefix[1:])
		out.Base64Bytes(in.Pubkey)
	}
	{
		const prefix string = ",\"Payload\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Payload)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Player) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComFyxgamingVmBattleTypes(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Player) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComFyxgamingVmBattleTypes(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Player) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComFyxgamingVmBattleTypes(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Player) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComFyxgamingVmBattleTypes(l, v)
}
func easyjson6601e8cdDecodeGithubComFyxgamingVmBattleTypes1(in *jlexer.Lexer, out *BattleTurn) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Seq":
			out.Seq = int32(in.Int32())
		case "Payload":
			if in.IsNull() {
				in.Skip()
				out.Payload = nil
			} else {
				out.Payload = in.Bytes()
			}
		case "Status":
			out.Status = BattleStatus(in.Int8())
		case "Sig":
			if in.IsNull() {
				in.Skip()
				out.Sig = nil
			} else {
				out.Sig = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComFyxgamingVmBattleTypes1(out *jwriter.Writer, in BattleTurn) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Seq\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Seq))
	}
	{
		const prefix string = ",\"Payload\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Payload)
	}
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix)
		out.Int8(int8(in.Status))
	}
	{
		const prefix string = ",\"Sig\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Sig)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BattleTurn) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComFyxgamingVmBattleTypes1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BattleTurn) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComFyxgamingVmBattleTypes1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BattleTurn) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComFyxgamingVmBattleTypes1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BattleTurn) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComFyxgamingVmBattleTypes1(l, v)
}
func easyjson6601e8cdDecodeGithubComFyxgamingVmBattleTypes2(in *jlexer.Lexer, out *BattleStart) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Engine":
			if in.IsNull() {
				in.Skip()
				out.Engine = nil
			} else {
				out.Engine = in.Bytes()
			}
		case "Players":
			if in.IsNull() {
				in.Skip()
				out.Players = nil
			} else {
				in.Delim('[')
				if out.Players == nil {
					if !in.IsDelim(']') {
						out.Players = make([]*Player, 0, 8)
					} else {
						out.Players = []*Player{}
					}
				} else {
					out.Players = (out.Players)[:0]
				}
				for !in.IsDelim(']') {
					var v14 *Player
					if in.IsNull() {
						in.Skip()
						v14 = nil
					} else {
						if v14 == nil {
							v14 = new(Player)
						}
						(*v14).UnmarshalEasyJSON(in)
					}
					out.Players = append(out.Players, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComFyxgamingVmBattleTypes2(out *jwriter.Writer, in BattleStart) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Engine\":"
		out.RawString(prefix[1:])
		out.Base64Bytes(in.Engine)
	}
	{
		const prefix string = ",\"Players\":"
		out.RawString(prefix)
		if in.Players == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Players {
				if v17 > 0 {
					out.RawByte(',')
				}
				if v18 == nil {
					out.RawString("null")
				} else {
					(*v18).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BattleStart) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComFyxgamingVmBattleTypes2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BattleStart) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComFyxgamingVmBattleTypes2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BattleStart) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComFyxgamingVmBattleTypes2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BattleStart) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComFyxgamingVmBattleTypes2(l, v)
}
func easyjson6601e8cdDecodeGithubComFyxgamingVmBattleTypes3(in *jlexer.Lexer, out *BattlePlayer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Pubkey":
			if in.IsNull() {
				in.Skip()
				out.Pubkey = nil
			} else {
				out.Pubkey = in.Bytes()
			}
		case "Payload":
			if in.IsNull() {
				in.Skip()
				out.Payload = nil
			} else {
				out.Payload = in.Bytes()
			}
		case "Fighter":
			if in.IsNull() {
				in.Skip()
				out.Fighter = nil
			} else {
				if out.Fighter == nil {
					out.Fighter = new(lib.Instance)
				}
				(*out.Fighter).UnmarshalEasyJSON(in)
			}
		case "Items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]*lib.Instance, 0, 8)
					} else {
						out.Items = []*lib.Instance{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v21 *lib.Instance
					if in.IsNull() {
						in.Skip()
						v21 = nil
					} else {
						if v21 == nil {
							v21 = new(lib.Instance)
						}
						(*v21).UnmarshalEasyJSON(in)
					}
					out.Items = append(out.Items, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Xp":
			out.Xp = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComFyxgamingVmBattleTypes3(out *jwriter.Writer, in BattlePlayer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Pubkey\":"
		out.RawString(prefix[1:])
		out.Base64Bytes(in.Pubkey)
	}
	{
		const prefix string = ",\"Payload\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Payload)
	}
	{
		const prefix string = ",\"Fighter\":"
		out.RawString(prefix)
		if in.Fighter == nil {
			out.RawString("null")
		} else {
			(*in.Fighter).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"Items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.Items {
				if v26 > 0 {
					out.RawByte(',')
				}
				if v27 == nil {
					out.RawString("null")
				} else {
					(*v27).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Xp\":"
		out.RawString(prefix)
		out.Int32(int32(in.Xp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BattlePlayer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComFyxgamingVmBattleTypes3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BattlePlayer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComFyxgamingVmBattleTypes3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BattlePlayer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComFyxgamingVmBattleTypes3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BattlePlayer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComFyxgamingVmBattleTypes3(l, v)
}
func easyjson6601e8cdDecodeGithubComFyxgamingVmBattleTypes4(in *jlexer.Lexer, out *BattleEnd) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Turns":
			if in.IsNull() {
				in.Skip()
				out.Turns = nil
			} else {
				in.Delim('[')
				if out.Turns == nil {
					if !in.IsDelim(']') {
						out.Turns = make([]*BattleTurn, 0, 8)
					} else {
						out.Turns = []*BattleTurn{}
					}
				} else {
					out.Turns = (out.Turns)[:0]
				}
				for !in.IsDelim(']') {
					var v28 *BattleTurn
					if in.IsNull() {
						in.Skip()
						v28 = nil
					} else {
						if v28 == nil {
							v28 = new(BattleTurn)
						}
						(*v28).UnmarshalEasyJSON(in)
					}
					out.Turns = append(out.Turns, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComFyxgamingVmBattleTypes4(out *jwriter.Writer, in BattleEnd) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Turns\":"
		out.RawString(prefix[1:])
		if in.Turns == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.Turns {
				if v29 > 0 {
					out.RawByte(',')
				}
				if v30 == nil {
					out.RawString("null")
				} else {
					(*v30).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BattleEnd) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComFyxgamingVmBattleTypes4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BattleEnd) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComFyxgamingVmBattleTypes4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BattleEnd) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComFyxgamingVmBattleTypes4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BattleEnd) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComFyxgamingVmBattleTypes4(l, v)
}
func easyjson6601e8cdDecodeGithubComFyxgamingVmBattleTypes5(in *jlexer.Lexer, out *Battle) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Engine":
			if in.IsNull() {
				in.Skip()
				out.Engine = nil
			} else {
				out.Engine = in.Bytes()
			}
		case "Players":
			if in.IsNull() {
				in.Skip()
				out.Players = nil
			} else {
				in.Delim('[')
				if out.Players == nil {
					if !in.IsDelim(']') {
						out.Players = make([]*BattlePlayer, 0, 8)
					} else {
						out.Players = []*BattlePlayer{}
					}
				} else {
					out.Players = (out.Players)[:0]
				}
				for !in.IsDelim(']') {
					var v32 *BattlePlayer
					if in.IsNull() {
						in.Skip()
						v32 = nil
					} else {
						if v32 == nil {
							v32 = new(BattlePlayer)
						}
						(*v32).UnmarshalEasyJSON(in)
					}
					out.Players = append(out.Players, v32)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Turns":
			if in.IsNull() {
				in.Skip()
				out.Turns = nil
			} else {
				in.Delim('[')
				if out.Turns == nil {
					if !in.IsDelim(']') {
						out.Turns = make([]*BattleTurn, 0, 8)
					} else {
						out.Turns = []*BattleTurn{}
					}
				} else {
					out.Turns = (out.Turns)[:0]
				}
				for !in.IsDelim(']') {
					var v33 *BattleTurn
					if in.IsNull() {
						in.Skip()
						v33 = nil
					} else {
						if v33 == nil {
							v33 = new(BattleTurn)
						}
						(*v33).UnmarshalEasyJSON(in)
					}
					out.Turns = append(out.Turns, v33)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Status":
			out.Status = BattleStatus(in.Int8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComFyxgamingVmBattleTypes5(out *jwriter.Writer, in Battle) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Engine\":"
		out.RawString(prefix[1:])
		out.Base64Bytes(in.Engine)
	}
	{
		const prefix string = ",\"Players\":"
		out.RawString(prefix)
		if in.Players == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v36, v37 := range in.Players {
				if v36 > 0 {
					out.RawByte(',')
				}
				if v37 == nil {
					out.RawString("null")
				} else {
					(*v37).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Turns\":"
		out.RawString(prefix)
		if in.Turns == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.Turns {
				if v38 > 0 {
					out.RawByte(',')
				}
				if v39 == nil {
					out.RawString("null")
				} else {
					(*v39).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix)
		out.Int8(int8(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Battle) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComFyxgamingVmBattleTypes5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Battle) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComFyxgamingVmBattleTypes5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Battle) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComFyxgamingVmBattleTypes5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Battle) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComFyxgamingVmBattleTypes5(l, v)
}
